{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Title from \"../components/ui/Title\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Card from \"../components/ui/Card\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredNumber = _useState2[0],\n      setEnteredNumber = _useState2[1];\n\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid number!\", \"Number has to be a number between 1 and 99.\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n\n    onPickNumber(chosenNumber);\n  }\n\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(Text, {\n        style: styles.instructionText,\n        children: \"Enter a Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: \"center\"\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useState","Title","PrimaryButton","Colors","Card","StartGameScreen","onPickNumber","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","rootContainer","instructionText","numberInput","buttonsContainer","buttonContainer","StyleSheet","create","flex","marginTop","alignItems","height","width","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection"],"sources":["/home/harrytimbog/code/Harrytimbog/react-native/RN_GUESSING_GAME/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from \"react\";\nimport { TextInput, View, StyleSheet, Alert, Text } from \"react-native\";\nimport Title from \"../components/ui/Title\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Colors from \"../constants/colors\";\nimport Card from \"../components/ui/Card\";\n\nfunction StartGameScreen({ onPickNumber }) {\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\n\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n\n  function confirmInputHandler() {\n    const chosenNumber = parseInt(enteredNumber);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\n        \"Invalid number!\",\n        \"Number has to be a number between 1 and 99.\",\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\n      );\n      return;\n    }\n\n    onPickNumber(chosenNumber);\n  }\n\n  return (\n    <View style={styles.rootContainer}>\n      <Title>Guess My Number</Title>\n      <Card>\n        <Text style={styles.instructionText}>Enter a Number</Text>\n        <TextInput\n          style={styles.numberInput}\n          maxLength={2}\n          keyboardType=\"number-pad\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          onChangeText={numberInputHandler}\n          value={enteredNumber}\n        />\n        <View style={styles.buttonsContainer}>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\n          </View>\n          <View style={styles.buttonContainer}>\n            <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\n          </View>\n        </View>\n      </Card>\n    </View>\n  );\n}\n\nexport default StartGameScreen;\n\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: \"center\",\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  buttonsContainer: {\n    flexDirection: \"row\",\n  },\n  buttonContainer: {\n    flex: 1,\n  },\n});\n"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;;AAEA,OAAOC,KAAP;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,OAAOC,IAAP;;;;AAEA,SAASC,eAAT,OAA2C;EAAA,IAAhBC,YAAgB,QAAhBA,YAAgB;;EACzC,gBAA0CN,QAAQ,CAAC,EAAD,CAAlD;EAAA;EAAA,IAAOO,aAAP;EAAA,IAAsBC,gBAAtB;;EAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;IACvCF,gBAAgB,CAACE,WAAD,CAAhB;EACD;;EAED,SAASC,iBAAT,GAA6B;IAC3BH,gBAAgB,CAAC,EAAD,CAAhB;EACD;;EAED,SAASI,mBAAT,GAA+B;IAC7B,IAAMC,YAAY,GAAGC,QAAQ,CAACP,aAAD,CAA7B;;IAEA,IAAIQ,KAAK,CAACF,YAAD,CAAL,IAAuBA,YAAY,IAAI,CAAvC,IAA4CA,YAAY,GAAG,EAA/D,EAAmE;MACjEG,KAAK,CAACC,KAAN,CACE,iBADF,EAEE,6CAFF,EAGE,CAAC;QAAEC,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE,aAAvB;QAAsCC,OAAO,EAAET;MAA/C,CAAD,CAHF;MAKA;IACD;;IAEDL,YAAY,CAACO,YAAD,CAAZ;EACD;;EAED,OACE,MAAC,IAAD;IAAM,KAAK,EAAEQ,MAAM,CAACC,aAApB;IAAA,WACE,KAAC,KAAD;MAAA;IAAA,EADF,EAEE,MAAC,IAAD;MAAA,WACE,KAAC,IAAD;QAAM,KAAK,EAAED,MAAM,CAACE,eAApB;QAAA;MAAA,EADF,EAEE,KAAC,SAAD;QACE,KAAK,EAAEF,MAAM,CAACG,WADhB;QAEE,SAAS,EAAE,CAFb;QAGE,YAAY,EAAC,YAHf;QAIE,cAAc,EAAC,MAJjB;QAKE,WAAW,EAAE,KALf;QAME,YAAY,EAAEf,kBANhB;QAOE,KAAK,EAAEF;MAPT,EAFF,EAWE,MAAC,IAAD;QAAM,KAAK,EAAEc,MAAM,CAACI,gBAApB;QAAA,WACE,KAAC,IAAD;UAAM,KAAK,EAAEJ,MAAM,CAACK,eAApB;UAAA,UACE,KAAC,aAAD;YAAe,OAAO,EAAEf,iBAAxB;YAAA;UAAA;QADF,EADF,EAIE,KAAC,IAAD;UAAM,KAAK,EAAEU,MAAM,CAACK,eAApB;UAAA,UACE,KAAC,aAAD;YAAe,OAAO,EAAEd,mBAAxB;YAAA;UAAA;QADF,EAJF;MAAA,EAXF;IAAA,EAFF;EAAA,EADF;AAyBD;;AAED,eAAeP,eAAf;AAEA,IAAMgB,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAC/BN,aAAa,EAAE;IACbO,IAAI,EAAE,CADO;IAEbC,SAAS,EAAE,GAFE;IAGbC,UAAU,EAAE;EAHC,CADgB;EAM/BP,WAAW,EAAE;IACXQ,MAAM,EAAE,EADG;IAEXC,KAAK,EAAE,EAFI;IAGXC,QAAQ,EAAE,EAHC;IAIXC,iBAAiB,EAAEhC,MAAM,CAACiC,SAJf;IAKXC,iBAAiB,EAAE,CALR;IAMXC,KAAK,EAAEnC,MAAM,CAACiC,SANH;IAOXG,cAAc,EAAE,CAPL;IAQXC,UAAU,EAAE,MARD;IASXC,SAAS,EAAE;EATA,CANkB;EAiB/BhB,gBAAgB,EAAE;IAChBiB,aAAa,EAAE;EADC,CAjBa;EAoB/BhB,eAAe,EAAE;IACfG,IAAI,EAAE;EADS;AApBc,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}